# Proyecto Levantar un servidor con nodeJS y Typescript

# Crear la carpeta del proyecto FINAL-RESTSERVER_TYPESCRIP

# Crear la carpeta src en la raiz del proyecto

# Instalar typescript de form global

1.- npm i -g typescript
//Version: tsc -v

# Crear proyecto NodeJS crea el package.json

2.- npm init -y

# Para Trabajar y compilar proyectos TS

3.- tsc --init
Configurar el tsconfig.json
{"compilerOptions": {}},
"include": [
"src"
],
"exclude": [
"node_modules"
]

# Para probar que funcione tsconfig.json

3.- tsc //Ejecutar en la terminal

# TSlint para verificar errores para seguir estandares de desarrollo

4.- npm i tslint --save-dev // de manera de desarrollo

# Instalar TS de manera local para trabajar con el tslint

5.- npm i typescript --save-dev // de manera de desarrollo

# Inicializar el archivo TSlint.json

6.- ./node_modules/.bin/tslint --init

Configurar tslint.json
"rules": {
"no-console":false
},

# Creacion del Servidor de express u sus middlewares

7.- creamos una carpeta models y dentro un archivo server.ts

# Intalacion de paquetes necesarios para configurar el server.ts

8.- npm i express cors dotenv morgan

# Instalar dependencia types de desarrollo

9.- npm i --save-dev @types/express y npm i --save-dev @types/cors

# Crear y configurar .ENV

PORT=8000

10.- Configurar el server.ts y el app.ts

# Nodemos y ts --watch, Ejecutar dos comandos al mismo tiempo con el modulo npm i concurrently

-- npm i concurrently -D
-- npm i nodemon -D
"scripts": {
"dev": "concurrently \"tsc -w\" \"nodemon dist/app.js\""
},

# Morgan permite ver por consola la peticiones que van llegando, configurar en el server.ts

npm i morgan
// 2.- Para parsear el BODY
// Son metodos que se ejecutan antes de que se pase a una ruta

public middlewares() {
// 1.- CORS
// this.app.use(cors());

// 2.-Lectura del BODY para que funcione potsman y entienda los formatos JSON
// this.app.use(express.json());

// 3.- Configurando la carpeta publica
// this.app.use(express.static('public'));

}

public routes() {

        // Morgan
        this.app.use(morgan('dev'));

        // this.app.use(this.apiPaths.usuarios, userRoutes);

    }

# Configurando Modelos, controladores y rutas de la aplicaci贸n

13.- Craer carpeta routes, models, controllers

# Midlewares necesarios para la aplicaci贸n para trabajar con postman

14.- // CORS
this.app.use(cors());

//Lectura del BODY para que funcione potsman
this.app.use(express.json());

# Crear la carpeta publica

15.- Crear en el directorio raiz public

# Instalaci贸n, conexion y configuraci贸n de MYSQL

16.- Crear la base de datos en laragon
17.- npm install --save sequelize
18.- npm i mysql2
